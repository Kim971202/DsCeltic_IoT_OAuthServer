<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oauth.mapper.MemberMapper">

    <resultMap id="member" type="com.oauth.dto.AuthServerDTO"> </resultMap>

    <select id="getUserByUserId" parameterType="String" resultMap="member">
        SELECT
            HP AS hp,
            USER_ID AS userId,
            USER_NICK AS userNickname,
            API_ATTC_KEY AS accessToken,
            HOUSE_HOLDER AS  householder
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getAccountByUserId" parameterType="String" resultMap="member">
        SELECT
            USER_ID AS userId,
            PW AS userPassword,
            REGIST_USER_TYPE AS registUserType
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{value}
    </select>

    <insert id="insertMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_USER
        (
            HP,
            USER_ID,
            USER_NICK
        )
        VALUES
        (
            #{hp},
            #{userId},
            #{userNickname}
        )
    </insert>

    <insert id="insertAccount" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_ACCOUNT
        (
            USER_ID,
            PW,
            REG_DATM,
            PUSH_TOKEN,
            REGIST_USER_TYPE,
            GOOGLE_HOME_STATUS
        )
        VALUES
        (
            #{userId},
            #{userPassword},
            now(),
            #{pushToken},
            #{registUserType},
            '01'
        )
    </insert>

    <select id="getUserByHp" parameterType="String" resultMap="member">
        SELECT
            a.HP AS hp,
            a.USER_ID AS userId,
            a.USER_NICK AS userNick,
            b.REGIST_USER_TYPE AS registUserType
        FROM
            TBR_OPR_USER a
        INNER JOIN
            TBR_OPR_ACCOUNT b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.HP = #{hp}
    </select>

    <select id="getUserByDeviceId" parameterType="String" resultMap="member">
        SELECT
            USER_ID AS userId
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getDeviceIdListByUserId" parameterType="String" resultMap="member">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getUserByUserIdAndHp" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.HP AS hp,
            a.USER_ID AS userId,
            a.USER_NICK AS userNick,
            b.REGIST_USER_TYPE AS registUserType
        FROM
            TBR_OPR_USER a
        INNER JOIN
            TBR_OPR_ACCOUNT b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.USER_ID = #{userId} AND a.HP = #{hp}
    </select>

    <select id="getUserByUserIdAndHpAndDeviceId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.HP AS hp,
            a.USER_ID AS userId,
            b.REGIST_USER_TYPE AS registUserType
        FROM
            TBT_OPR_DEVICE_REGIST
        INNER JOIN
            TBR_OPR_ACCOUNT b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            HP = #{hp}
        AND
            USER_ID = #{userId}
        <if test="deviceId != null">
        AND
            DEVC_ID = #{deviceId}
        </if>
        <if test="deviceId == null">
            LIMIT 1
        </if>
    </select>

    <update id="updatePassword" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_ACCOUNT
        SET
            PW = #{newPassword}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getPasswordByUserId" parameterType="String" resultMap="member">
        SELECT PW AS userPassword
        FROM TBR_OPR_ACCOUNT
        WHERE USER_ID = #{userId};
    </select>

    <update id="updateUserNicknameAndHp" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            HP = #{newHp},
            USER_NICK = #{userNickname}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="accessTokenCheck" parameterType="String" resultMap="member">
        SELECT
            USER_ID AS userId,
            API_ATTC_KEY AS accessToken
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
        AND
            API_ATTC_KEY = #{accessToken};
    </select>

    <select id="getHouseMembersByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.USER_ID AS userId,
            a.DEVC_ID AS deviceId,
            a.HOUSE_HOLDER AS householder,
            b.USER_NICK AS userNickname
        FROM
            TBR_OPR_USER_DEVICE a
        INNER JOIN
            TBR_OPR_USER b
        WHERE
            a.USER_ID = b.USER_ID AND DEVC_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deviceId}
        </foreach>
    </select>

    <select id="getDeviceIdByUserId" parameterType="String" resultMap="member">
        SELECT DISTINCT
            a.USER_ID AS userId,
            a.DEVC_ID AS deviceId,
            a.HOUSE_HOLDER AS householder,
            a.DEVC_CTRL_KEY AS controlAuthKey,
            MAX(a.ATTC_DATM) AS authenticationDatetime,  -- 최근 인증 날짜를 선택
            b.DEVC_NICK AS deviceNickname,
            c.TEMP_DEVC_REG_KEY AS tmpRegistKey,
            c.LAT AS latitude,
            c.LON AS longitude,
            MAX(a.REG_DATM) AS REG_DATM,  -- 가장 최근의 등록 날짜를 선택
            ROW_NUMBER() OVER () AS regSort
        FROM
            TBR_OPR_USER_DEVICE a
        INNER JOIN
            TBR_OPR_DEVICE_DETAIL b ON a.DEVC_ID = b.DEVC_ID
        INNER JOIN
            TBT_OPR_DEVICE_REGIST c ON c.DEVC_ID = b.DEVC_ID
        WHERE
            a.USER_ID = #{userId} AND c.USER_ID = #{userId}
        GROUP BY
            a.USER_ID,
            a.DEVC_ID,
            a.HOUSE_HOLDER,
            a.DEVC_CTRL_KEY,
            b.DEVC_NICK,
            c.TEMP_DEVC_REG_KEY,
            c.LAT,
            c.LON
        ORDER BY
            MAX(a.REG_DATM) ASC
    </select>

    <insert id="inviteHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_USER_INVITE_STATUS
            (
                REQUEST_USER_ID,
                RESPONSE_USER_ID,
                RESPONSE_USER_HP,
                INVITE_START_DATE,
                INVITE_END_DATE,
                INVITE_ACCEPT_YN,
                REQUEST_USER_NICK
            )
            VALUES(
                #{requestUserId},
                #{responseUserId},
                #{responseHp},
                DATE_FORMAT(now(), "%y-%m-%d %H:%i:%S"),
                DATE_ADD(DATE_FORMAT(now(), "%y-%m-%d %H:%i:%S"),
                INTERVAL 3 DAY),
                'N',
                #{requestUserNick}
            );
    </insert>

    <update id="updateInviteHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_INVITE_STATUS
        SET
            INVITE_ACCEPT_YN = #{inviteAcceptYn},
            INVITE_ACCEPT_DATE = #{inviteAcceptDate}
        WHERE
            RESPONSE_USER_ID = #{userId}
    </update>

    <select id="getInvitationList" parameterType="String" resultMap="member">
        SELECT
            INVITATION_IDX AS invitationIdx,
            REQUEST_USER_ID AS requestUserId,
            RESPONSE_USER_ID AS responseUserId,
            RESPONSE_USER_HP AS responseHp,
            INVITE_START_DATE AS inviteStartDate,
            INVITE_END_DATE AS inviteEndDate,
            INVITE_ACCEPT_YN AS inviteAcceptYn,
            REQUEST_USER_NICK AS requestUserNick,
            RESPONSE_USER_NICK AS responseUserNick
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            REQUEST_USER_ID = #{responseUserId} OR RESPONSE_USER_ID = #{responseUserId};
    </select>
    
    <update id="acceptInvite" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_INVITE_STATUS
        SET
            INVITE_ACCEPT_YN = #{inviteAcceptYn},
            INVITE_ACCEPT_DATE = now(),
            RESPONSE_USER_NICK = #{responseUserNick}
        WHERE INVITATION_IDX = #{invitationIdx}
    </update>

    <insert id="insertNewHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_OPR_USER_DEVICE
            (USER_ID, DEVC_ID, DEVC_CTRL_KEY, ATTC_DATM, HOUSE_HOLDER)
        VALUES
        <foreach collection="list" item="item" index="idx" separator=",">
        (
            #{item.responseUserId},
            #{item.deviceId},
            #{item.controlAuthKey},
            #{item.authenticationDatetime},
            #{item.householder}
        )
        </foreach>
    </insert>

    <update id="changeHouseholdStatus" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_DEVICE
        SET
            HOUSE_HOLDER = #{householder}
        WHERE
            USER_ID = #{userId}
        AND
            DEVC_ID = #{deviceId}
    </update>

    <update id="updatePushCodeStatus" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_DEVICE_PUSH
        <set>
            <if test="fPushYn != null">PUSH_YN_01 = #{fPushYn},</if>
            <if test="sPushYn != null">PUSH_YN_02 = #{sPushYn},</if>
            <if test="tPushYn != null">PUSH_YN_03 = #{tPushYn},</if>
        </set>
        WHERE
            USER_ID = #{userId} AND DEVC_ID = #{deviceId}
    </update>

    <select id="getPushCodeStatus" parameterType="map" resultMap="member">
        SELECT
            push.PUSH_YN_01 AS fPushYn,
            push.PUSH_YN_02 AS sPushYn,
            push.PUSH_YN_03 AS tPushYn,
            push.DEVC_ID AS deviceId,
            device.ATTC_ID AS controlAuthKey,
            device.DEVC_MODL_CD AS modelCode
        FROM
            TBR_OPR_USER_DEVICE_PUSH AS push
        INNER JOIN
            TBR_IOT_DEVICE AS device
        ON
            push.DEVC_ID = device.DEVC_ID
        WHERE
            push.USER_ID = #{userId}
        AND
            push.DEVC_ID IN (${deviceIds})
    </select>

    <delete id="delHouseMember" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE FROM TBR_OPR_USER_DEVICE
        WHERE USER_ID = #{userId}
    </delete>

    <select id="getNextHouseholderUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            DEVC_ID as deviceId,
            USER_ID AS userId
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            USER_ID != #{userId}
        LIMIT 1;
    </select>

    <update id="updateHouseholdTbrOprUser" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER
        SET HOUSE_HOLDER = "Y"
        WHERE USER_ID = #{userId}
    </update>

    <update id="updateHouseholdTbrOprUserDevice" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER_DEVICE
        SET HOUSE_HOLDER = "Y"
        WHERE USER_ID = #{userId}
    </update>

    <select id="deleteMemberFromService" parameterType="String" resultType="String">
        CALL deleteUserFromService(#{userId})
    </select>

    <select id="deleteControllerMapping" parameterType="com.oauth.dto.AuthServerDTO" resultType="String">
        CALL
            deleteControllerMapping
                (
                    #{deviceId},
                    #{userId},
                    #{controlAuthKey}
                )
    </select>

    <select id="getPushInfoList" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            PUSH_IDX AS pushIdx,
            PUSH_TITLE AS pushTitle,
            PUSH_CONTENT AS pushContent,
            (
            CASE WHEN PUSH_TYPE = '00' THEN '전체'
                 WHEN PUSH_TYPE = '01' THEN '보일러'
                 WHEN PUSH_TYPE = '02' THEN '환기'
                 WHEN PUSH_TYPE = '03' THEN '각방'
                 ELSE '-'
            END
            ) AS pushType,
            DATE_FORMAT(PUSH_DATETIME, '%Y-%m-%d %H:%i:%s') AS pushDateTime
        FROM
            TBR_OPR_USER_DEVICE_PUSH_INFO
        WHERE
            USER_ID = #{userId}
        AND
            PUSH_DATETIME BETWEEN #{startDatetime} AND #{endDatetime}
        <if test="deviceType != 00">
            AND PUSH_TYPE = #{deviceType}
        </if>
    </select>

    <select id="getNoticeList" resultMap="member">
        SELECT
            NOTI_IDX AS noticeIdx,
            (
                CASE WHEN NOTI_TYPE = '00' THEN 'ALL'
                     WHEN NOTI_TYPE = '01' THEN '보일러'
                     WHEN NOTI_TYPE = '05' THEN '각방'
                     WHEN NOTI_TYPE = '07' THEN '환기'
                     ELSE '-'
                END
            ) AS noticeType,
            NOTI_TITLE AS noticeTitle,
            NOTI_CONTENT AS noticeContent,
            NOTI_START_DATE AS noticeStartDate,
            NOTI_END_DATE AS noticeEndDate
        FROM
            TBR_OPR_USER_NOTICE
    </select>

    <update id="updateDeviceLocationNicknameDeviceDetail" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_DEVICE_DETAIL
        SET ADDR_NICK = #{newDeviceLocNickname}
        WHERE DEVC_ID = #{deviceId}
    </update>

    <update id="updateDeviceLocationNicknameDeviceRegist" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            ADDR_NICK = #{newDeviceLocNickname}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <select id="getUserIdByUserId" resultMap="member">
        SELECT
            USER_ID AS userId
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{userId}
    </select>

    <insert id="insertCommandHistory" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_IOT_CTRL_REQ
        (
            CD_TYPE,
            COMD_ID,
            CTRL_CD,
            CTRL_CD_NM,
            COMD_FLOW,
            COMD_DATM,
            USER_ID,
            DEVC_ID
        )
            VALUES
        (
            #{codeType},
            #{commandId},
            #{controlCode},
            #{controlCodeName},
            #{commandFlow},
            now(),
            #{userId},
            #{deviceId}
        )
    </insert>

    <select id="identifyRKey" parameterType="String" resultMap="member">
        SELECT
            a.DEVC_ID AS deviceId,
            a.SERIAL_NO AS serialNumber,
            b.DEVC_CTRL_KEY AS controlAuthKey
        FROM
            TBR_IOT_DEVICE a
        INNER JOIN
            TBR_OPR_DEVICE_DETAIL b
        WHERE
            a.DEVC_ID = b.DEVC_ID
        AND
            a.SERIAL_NO = #{serialNumber}
    </select>

    <update id="updateLoginDatetime" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            LAST_LOGIN_DATM = now(),
            API_ATTC_KEY = #{accessToken},
            API_ATTC_KEY_CRE_DATM = now()
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getHpByUserId" parameterType="String" resultMap="member">
        SELECT
            HP AS hp
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getWorkTime" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            WORK_TIME AS workTime,
            INSERT_DATETIME AS workDate
        FROM
            TBR_OPR_DEVICE_WORK_DATETIME
        WHERE
            DEVC_ID = #{deviceId}
        AND
            R_KEY = #{controlAuthKey};
    </select>

    <select id="getPushTokenByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            PUSH_TOKEN AS pushToken
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{userId}
    </select>

    <update id="updatePushToken" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_ACCOUNT
        SET
            PUSH_TOKEN = #{pushToken}
        WHERE
            USER_ID = #{userId}
    </update>

    <insert id="insertUserDevicePush" parameterType="com.oauth.dto.AuthServerDTO" >
        INSERT INTO
            TBR_OPR_USER_DEVICE_PUSH
            (
                USER_ID,
                DEVC_ID,
                HP,
                PUSH_YN_01,
                PUSH_YN_02,
                PUSH_YN_03
            )
                VALUES
            (
                #{userId},
                #{deviceId},
                #{hp},
                'N',
                'N',
                'N'
            )
    </insert>

    <insert id="insertPushHistory" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_USER_DEVICE_PUSH_INFO
        (
            USER_ID,
            PUSH_TITLE,
            PUSH_CONTENT,
            PUSH_TYPE,
            PUSH_DATETIME
        )
        VALUES
        (
            #{userId},
            #{pushTitle},
            #{pushContent},
            '01',
            now()
        )
    </insert>

    <update id="UpdateSafeAlarmSet" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            SAFE_ALARM_TIME = #{safeAlarmTime},
            SAFE_ALARM_STATUS = #{safeAlarmStatus}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getPushYnStatus" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            PUSH_YN_01 AS fPushYn,
            PUSH_YN_02 AS sPushYn,
            PUSH_YN_03 AS tPushYn
        FROM
            TBR_OPR_USER_DEVICE_PUSH
        WHERE
            USER_ID = #{userId}
        <if test="deviceId != null">
            AND DEVC_ID = #{deviceId}
        </if>
        <if test="deviceId == null">
            LIMIT 1
        </if>
    </select>

    <select id="getUserIdsByDeviceId" parameterType="String" resultMap="member">
        SELECT
            a.USER_ID AS userId,
            b.PUSH_TOKEN AS pushToken
        FROM
            TBR_OPR_USER_DEVICE a
        INNER JOIN
            TBR_OPR_ACCOUNT b
        WHERE
            a.USER_ID = b.USER_ID AND DEVC_ID = #{deviceId}
    </select>

    <select id="getPushYnStatusByUserIds" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
        PUSH_YN_01 AS fPushYn,
        PUSH_YN_02 AS sPushYn,
        PUSH_YN_03 AS tPushYn
        FROM
        TBR_OPR_USER_DEVICE_PUSH
        WHERE
        USER_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.userId}
        </foreach>
    </select>

</mapper>