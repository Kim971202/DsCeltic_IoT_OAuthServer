<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oauth.mapper.MemberMapper">

    <resultMap id="member" type="com.oauth.dto.AuthServerDTO">

    </resultMap>

    <select id="getUserByUserId" parameterType="String" resultMap="member">
        SELECT HP AS hp, USER_ID AS userId, USER_NICK AS userNickname, API_ATTC_KEY AS accessToken
        FROM TBR_OPR_USER
        WHERE USER_ID = #{value}
    </select>

    <insert id="insertMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_OPR_USER (HP, USER_ID, USER_NICK)
        VALUES (#{hp}, #{userId}, #{userNickname})
    </insert>

    <insert id="insertAccount" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_OPR_ACCOUNT (USER_ID, PW, REG_DATM)
        VALUES (#{userId}, #{userPassword}, now())
    </insert>

    <select id="getUserByHp" parameterType="String" resultMap="member">
        SELECT HP AS hp, USER_ID AS userId, USER_NICK AS userNick
        FROM TBR_OPR_USER
        WHERE HP = #{value}
    </select>

    <select id="getUserByDeviceId" parameterType="String" resultMap="member">
        SELECT USER_ID AS userId
        FROM TBR_OPR_USER_DEVICE
        WHERE DEVC_ID = #{value}
    </select>

    <select id="getUserByUserIdAndHp" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT *
        FROM TBR_OPR_USER
        WHERE HP = #{hp} AND USER_ID = #{userId};
    </select>

    <select id="getUserByUserIdAndHpAndDeviceId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT *
        FROM TBT_OPR_DEVICE_REGIST
        WHERE DEVC_ID = #{deviceId} AND HP = #{hp} AND USER_ID = #{userId};
    </select>

    <update id="updatePassword" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_ACCOUNT SET PW = #{userPassword}
        WHERE USER_ID = #{userId}
    </update>

    <select id="passwordCheck" parameterType="String" resultMap="member">
        SELECT USER_ID AS userId
        FROM TBR_OPR_ACCOUNT
        WHERE PW = #{pw};
    </select>

    <update id="updateUserNicknameAndHp" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER SET HP = #{newHp}, USER_NICK = #{userNickname}
        WHERE USER_ID = #{userId}
    </update>

    <select id="accessTokenCheck" parameterType="String" resultMap="member">
        SELECT USER_ID AS userId, API_ATTC_KEY AS accessToken
        FROM TBR_OPR_USER
        WHERE USER_ID = #{userId} AND API_ATTC_KEY = #{accessToken};
    </select>

    <select id="getHouseMembersByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.USER_ID AS userId,
            a.DEVC_ID AS deviceId,
            a.HOUSE_HOLDER AS householder,
            b.USER_NICK AS userNickname
        FROM
            TBR_OPR_USER_DEVICE a
        INNER JOIN
            TBR_OPR_USER b
        WHERE
            a.USER_ID = b.USER_ID AND DEVC_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deviceId}
        </foreach>
    </select>

    <select id="getDeviceIdByUserId" parameterType="String" resultMap="member">
        SELECT DISTINCT
            a.USER_ID AS userId,
            a.DEVC_ID AS deviceId,
            a.HOUSE_HOLDER AS householder,
            a.DEVC_CTRL_KEY AS controlAuthKey,
            a.ATTC_DATM AS authenticationDatetime,
            b.DEVC_NICK AS deviceNickname,
            ROW_NUMBER() OVER () AS regSort
        FROM
            TBR_OPR_USER_DEVICE a
        INNER JOIN
            TBR_OPR_DEVICE_DETAIL b ON a.DEVC_ID = b.DEVC_ID
        WHERE
            a.DEVC_ID = b.DEVC_ID AND a.USER_ID = #{userId}
        ORDER BY
        REG_DATM ASC;
    </select>

    <insert id="inviteHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_OPR_USER_INVITE_STATUS
        (
        REQUEST_USER_ID,
        RESPONSE_USER_ID,
        RESPONSE_USER_HP,
        INVITE_START_DATE,
        INVITE_END_DATE,
        RESPONSE_ACCEPTANCE_STATUS
        )
        VALUES(
        #{requestUserId},
        #{responseUserId},
        #{responseHp},
        DATE_FORMAT(now(), "%y-%m-%d"),
        DATE_ADD(DATE_FORMAT(now(), "%y-%m-%d"),
        INTERVAL 3 DAY),
        'N');
    </insert>

    <update id="updateInviteHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER_INVITE_STATUS SET
        INVITE_ACCEPT_YN = #{inviteAcceptYn},
        INVITE_ACCEPT_DATE = #{inviteAcceptDate}
        WHERE RESPONSE_USER_ID = #{userId}
    </update>

    <select id="getInvitationList" parameterType="String" resultMap="member">
        SELECT
        INVITATION_IDX AS invitationIdx,
        REQUEST_USER_ID AS requestUserId,
        RESPONSE_USER_ID AS responseUserId,
        RESPONSE_USER_HP AS responseHp,
        INVITE_START_DATE AS inviteStartDate,
        INVITE_END_DATE AS inviteEndDate,
        INVITE_ACCEPT_YN AS inviteAcceptYn,
        REQUEST_USER_NICK AS requestUserNick,
        RESPONSE_USER_NICK AS responseUserNick
        FROM TBR_OPR_USER_INVITE_STATUS
        WHERE REQUEST_USER_ID = #{responseUserId};
    </select>
    
    <update id="acceptInvite" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER_INVITE_STATUS
        SET INVITE_ACCEPT_YN = #{inviteAcceptYn}, INVITE_ACCEPT_DATE = now()
        WHERE INVITATION_IDX = #{invitationIdx}
    </update>

    <insert id="insertNewHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_OPR_USER_DEVICE
        (USER_ID, DEVC_ID, DEVC_CTRL_KEY, ATTC_DATM, HOUSE_HOLDER)
        VALUES
        <foreach collection="list" item="item" index="idx" separator=",">
        (
            #{item.responseUserId},
            #{item.deviceId},
            #{item.controlAuthKey},
            #{item.authenticationDatetime},
            #{item.householder}
        )
        </foreach>
    </insert>

    <update id="changeHouseholdStatus" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER_DEVICE
        SET HOUSE_HOLDER = #{householder}
        WHERE USER_ID = #{userId}
        AND DEVC_ID = #{deviceId}
    </update>

    <update id="updatePushCodeStatus" parameterType="hashmap">
        <foreach collection="list" item="item">
            UPDATE
                TBR_OPR_USER_DEVICE_PUSH
            SET
                PUSH_YN_01 = #{item.fPushYn},
                PUSH_YN_02 = #{item.sPshYn},
                PUSH_YN_03 = #{item.tPushYn}
            WHERE
                USER_ID = #{item.userId} AND DEVC_ID = #{item.deviceId}
        </foreach>
    </update>

    <select id="getPushCodeStatus" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT PUSH_YN_01 AS fPushYn, PUSH_YN_02 AS sPushYn, PUSH_YN_03 AS tPushYn
        FROM TBR_OPR_USER_DEVICE_PUSH
        WHERE USER_ID = #{userId} AND DEVC_ID = #{deviceId};
    </select>

    <delete id="delHouseMember" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE FROM TBR_OPR_USER_DEVICE
        WHERE USER_ID = #{userId}
    </delete>

    <select id="getNextHouseholderUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            DEVC_ID as deviceId,
            USER_ID AS userId
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            USER_ID != #{userId}
        LIMIT 1;
    </select>

    <update id="updateHouseholdTbrOprUser" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER
        SET HOUSE_HOLDER = "Y"
        WHERE USER_ID = #{userId}
    </update>

    <update id="updateHouseholdTbrOprUserDevice" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE TBR_OPR_USER_DEVICE
        SET HOUSE_HOLDER = "Y"
        WHERE USER_ID = #{userId}
    </update>

    <select id="deleteMemberFromService" parameterType="String" resultType="String">
        CALL deleteUserFromService(#{userId})
    </select>

    <select id="deleteControllerMapping" parameterType="com.oauth.dto.AuthServerDTO" resultType="String">
        CALL deleteUserFromService(#{deviceId}, #{userId}, #{controlAuthKey})
    </select>

</mapper>