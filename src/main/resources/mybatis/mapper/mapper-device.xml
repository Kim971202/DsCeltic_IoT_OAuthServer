<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oauth.mapper.DeviceMapper">

    <resultMap id="device" type="com.oauth.dto.AuthServerDTO"> </resultMap>
    <resultMap id="dr910w" type="com.oauth.dto.gw.DeviceStatusInfo$Device"> </resultMap>
    <resultMap id="String" type="String"> </resultMap>

    <select id="getDeviceInfoSearchIdx" parameterType="java.util.List" resultMap="device">
        SELECT DISTINCT
            device.DEVC_MODL_CD AS modelCode,
            device.ATTC_ID AS controlAuthKey,
            device.DEVC_ID AS deviceId,
            regist.DEVC_NICK AS deviceNickname,
            regist.ZIP AS zipCode,
            regist.OLD_ADDR AS oldAddr,
            regist.NEW_ADDR AS newAddr,
            regist.DTAIL_ADDR AS addrDetail,
            regist.LAT AS latitude,
            regist.LON AS longitude,
            regist.TEMP_DEVC_REG_KEY AS tmpRegistKey,
            regist.GRP_IDX AS groupIdx,
            regist.GRP_NM AS groupName,
            regist.USER_ID AS userId
        FROM
            TBR_IOT_DEVICE AS device
        INNER JOIN
            TBT_OPR_DEVICE_REGIST AS regist
        ON
            device.DEVC_ID = regist.DEVC_ID
        INNER JOIN
            TBD_USER_INVITE_GROUP AS invite
        ON
            regist.GRP_IDX = invite.GRP_IDX
        WHERE
            invite.GRP_IDX IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getDeviceInfoSearchList" parameterType="java.util.List" resultMap="device">
        SELECT
        device.DEVC_MODL_CD AS modelCode,
        device.ATTC_ID AS controlAuthKey,
        device.DEVC_ID AS deviceId,
        regist.DEVC_NICK AS deviceNickname,
        regist.ZIP AS zipCode,
        regist.OLD_ADDR AS oldAddr,
        regist.NEW_ADDR AS newAddr,
        regist.DTAIL_ADDR AS addrDetail,
        regist.LAT AS latitude,
        regist.LON AS longitude,
        regist.TEMP_DEVC_REG_KEY AS tmpRegistKey,
        regist.GRP_IDX AS groupIdx,
        regist.GRP_NM AS groupName,
        regist.USER_ID AS userId,
        ROW_NUMBER() OVER () AS regSort
        FROM
        TBR_IOT_DEVICE AS device
        INNER JOIN
        TBT_OPR_DEVICE_REGIST AS regist
        ON
        device.DEVC_ID = regist.DEVC_ID
        INNER JOIN
        WHERE
            regist.USER_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.groupId}
        </foreach>
    </select>

    <select id="getSingleSerialNumberBydeviceId" parameterType="String" resultMap="device">
        SELECT
            SERIAL_NO AS serialNumber
        FROM
            TBR_IOT_DEVICE
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getMultiSerialNumberBydeviceId" parameterType="hashmap" resultMap="device">
        SELECT
            SERIAL_NO AS serialNumber,
            DEVC_MODL_CD AS modelCode
        FROM
            TBR_IOT_DEVICE
        WHERE
            DEVC_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deviceId}
        </foreach>
    </select>

    <select id="getDeviceAuthCheckValuesByUserId" parameterType="String" resultMap="device">
        SELECT
            DEVC_ID AS deviceId,
            DEVC_CTRL_KEY AS controlAuthKey
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="deviceAuthCheck" parameterType="hashmap" resultMap="device">
        SELECT
            DEVC_ID AS deviceId,
            DEVC_CTRL_KEY AS controlAuthKey,
            DEVC_NICK AS deviceNickname
        FROM
            TBR_OPR_DEVICE_DETAIL
        WHERE
            <foreach collection="list" item="item" separator=" OR " open="(" close=")">
                DEVC_ID = #{item.deviceId} AND DEVC_CTRL_KEY = #{item.controlAuthKey}
            </foreach>
    </select>

    <select id="deviceTempAuthCheck" parameterType="com.oauth.dto.AuthServerDTO" resultMap="device">
        SELECT
            *
        FROM
            TBR_OPR_DEVICE_DETAIL
        WHERE
            TEMP_DEVC_REG_KEY = #{controlAuthKey}
        AND
            DEVC_ID = #{deviceId}
        AND
            HP = #{hp}
        AND
            USER_ID = #{userId}
    </select>

    <update id="changeDeviceNickname" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_DEVICE_DETAIL
        SET
            DEVC_NICK = #{newDeviceNickname}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <insert id="insertDeviceModelCode" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBD_IOT_DEVICE_MODL_CD
            (
                DEVC_MODL_CD,
                DEVC_MODL_NM,
                MENUFACTORY_NM,
                DEVC_TYPE_CD,
                REG_DATM,
                MENUFACTORY_CD
            )
        VALUES
            (
                #{modelCode},
                'BOILER',
                'DSCeltic',
                #{deviceType},
                now(),
                'DS'
            )
    </insert>

    <insert id="insertDeviceGrpInfo" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_IOT_DEVICE_GRP_INFO
            (
                DEVC_ID,
                GRP_ID
            )
            VALUES
            (
                #{deviceId},
                #{userId}
            )
    </insert>

    <insert id="insertDeviceListGrpInfo" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_IOT_DEVICE_GRP_INFO
        (
            DEVC_ID,
            GRP_ID
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.deviceId},
                #{item.userId}
            )
        </foreach>
    </insert>

    <delete id="deleteDeviceListGrpInfo" parameterType="list">
        DELETE FROM
            TBR_IOT_DEVICE_GRP_INFO
        WHERE
            (DEVC_ID, GRP_ID) IN
        <foreach collection="list" item="item" open="(" separator="),(" close=")">
            (#{item.deviceId}, #{item.userId})
        </foreach>
    </delete>

    <insert id="insertDevice" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_IOT_DEVICE
            (
                DEVC_ID,
                DEVC_MODL_CD,
                SERIAL_NO,
                ATTC_ID,
                DEVC_LAT,
                DEVC_LON,
                DEVC_STAT_CD,
                REG_DATAM,
                LAST_CONN_DATM,
                LSAT_FAULT_DATM
            )
        VALUES
            (
                #{deviceId},
                #{modelCode},
                #{serialNumber},
                #{controlAuthKey},
                #{latitude},
                #{longitude},
                '01',
                now(),
                now(),
                now()
            )
    </insert>

    <insert id="insertDeviceRegist" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBT_OPR_DEVICE_REGIST
            (
                TEMP_DEVC_REG_KEY,
                DEVC_ID,
                HP,
                USER_ID,
                ZIP,
                OLD_ADDR,
                NEW_ADDR,
                DTAIL_ADDR,
                LAT,
                LON,
                DEVC_NICK,
                REG_DATM,
                GRP_IDX,
                GRP_NM
            )
        VALUES
            (
                #{tmpRegistKey},
                #{deviceId},
                #{hp},
                #{userId},
                #{zipCode},
                #{oldAddr},
                #{newAddr},
                #{addrDetail},
                #{latitude},
                #{longitude},
                #{deviceNickname},
                now(),
                #{idx},
                #{groupName}
            )
    </insert>

    <update id="updateDeviceRegist" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            ZIP = #{zipCode},
            OLD_ADDR = #{oldAddr},
            NEW_ADDR = #{newAddr},
            DTAIL_ADDR = #{addrDetail},
            LAT = #{latitude},
            LON = #{longitude},
            DEVC_NICK = #{deviceNickname},
            REG_DATM = now()
        WHERE
            DEVC_ID = #{deviceId}
        AND
            HP = #{hp}
        AND
            USER_ID = #{userId}
    </update>

    <insert id="insertDeviceDetail" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO TBR_OPR_DEVICE_DETAIL
            (
                DEVC_ID,
                DEVC_CTRL_KEY,
                ZIP,
                OLD_ADDR,
                NEW_ADDR,
                DTAIL_ADDR,
                DEVC_STAT_JSON,
                DEVC_NICK,
                DEVC_REG_DATM,
                GRP_IDX
            )
        VALUES
            (
                #{deviceId},
                #{controlAuthKey},
                #{zipCode},
                #{oldAddr},
                #{newAddr},
                #{addrDetail},
                'empty',
                #{deviceNickname},
                now(),
                #{idx}
            )
    </insert>

    <update id="updateDeviceDetail" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE
            TBR_OPR_DEVICE_DETAIL
        SET
            DEVC_CTRL_KEY = #{newControlAuthKey},
            ZIP = #{zipCode},
            OLD_ADDR = #{oldAddr},
            NEW_ADDR = #{newAddr},
            DTAIL_ADDR = #{addrDetail},
            DEVC_NICK = #{deviceNickname},
            DEVC_REG_DATM = now()
        WHERE
            DEVC_CTRL_KEY = #{controlAuthKey}
        AND
            DEVC_ID = #{deviceId}
    </update>

    <update id="changeDeviceNicknameTemp" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            DEVC_NICK = #{deviceNickname}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <update id="updateGroupName" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBD_USER_INVITE_GROUP
        SET
            GRP_NM = #{groupName}
        WHERE
            GRP_IDX = #{groupIdx}
    </update>

    <update id="updateDeviceRegistLocation" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            ZIP = #{zipCode},
            OLD_ADDR = #{oldAddr},
            NEW_ADDR = #{newAddr},
            DTAIL_ADDR = #{addrDetail},
            LAT = #{latitude},
            LON = #{longitude},
            DEVC_NICK = #{deviceNickname}
        WHERE
            TEMP_DEVC_REG_KEY = #{tmpRegistKey}
        AND
            DEVC_ID = #{deviceId}
    </update>

    <update id="updateDeviceRegistGroupName" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            GRP_NM = #{groupName}
        WHERE
            GRP_IDX = #{groupIdx}
    </update>

    <update id="updateDeviceDetailLocation" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_DEVICE_DETAIL
        SET
            ZIP = #{zipCode},
            OLD_ADDR = #{oldAddr},
            NEW_ADDR = #{newAddr},
            DTAIL_ADDR = #{addrDetail},
            DEVC_NICK = #{deviceNickname}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <select id="getControlAuthKeyByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="device">
        SELECT
            DEVC_CTRL_KEY AS controlAuthKey,
            DEVC_ID AS deviceId,
            USER_ID AS userId
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            USER_ID = #{groupId}
        AND
            GRP_IDX = #{groupIdx}
    </select>

    <select id="getDeviceNicknameAndDeviceLocNickname" parameterType="com.oauth.dto.AuthServerDTO" resultMap="device">
        SELECT
            DEVC_NICK AS deviceNickname,
            DEVC_ID AS deviceId,
            LAT AS latitude,
            LON AS longitude,
            TEMP_DEVC_REG_KEY AS tmpRegistKey,
            ROW_NUMBER() OVER () AS regSort
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            DEVC_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deviceId}
        </foreach>
        AND
            USER_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.userId}
        </foreach>
        ORDER BY DEVC_ID
    </select>

    <select id="getDeviceInfoSearch" parameterType="String" resultMap="device">
        SELECT
            device.DEVC_MODL_CD AS modelCode,
            regist.DEVC_NICK AS deviceNickname,
            regist.ZIP AS zipCode,
            regist.OLD_ADDR AS oldAddr,
            regist.NEW_ADDR AS newAddr,
            regist.DTAIL_ADDR AS addrDetail,
            regist.LAT AS latitude,
            regist.LON AS longitude,
            regist.GRP_IDX AS groupIdx,
            regist.GRP_NM AS groupName
        FROM
            TBR_IOT_DEVICE AS device
        INNER JOIN
            TBT_OPR_DEVICE_REGIST AS regist
        ON
            device.DEVC_ID = regist.DEVC_ID
        WHERE
            device.DEVC_ID =  #{deviceId} AND regist.USER_ID = #{userId};
    </select>

    <insert id="insertDeviceStatus" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        INSERT INTO TBR_OPR_DEVICE_STATUS
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="deviceId != null">DEVC_ID,</if>
            <if test="serialNumber != null">SERIAL_NO,</if>
            <if test="rKey != null">R_KEY,</if>
            <if test="powr != null">POWR,</if>
            <if test="opMd != null">OPMD,</if>
            <if test="htTp != null">HTTP,</if>
            <if test="wtTp != null">WTTP,</if>
            <if test="hwTp != null">HWTP,</if>
            <if test="ftMd != null">FTMD,</if>
            <if test="bCdt != null">BCDT,</if>
            <if test="chTp != null">CHTP,</if>
            <if test="cwTp != null">CWTP,</if>
            <if test="hwSt != null">HWST,</if>
            <if test="slCd != null">SLCD,</if>
            <if test="mfDt != null">MFDT,</if>
            <if test="h12 != null">12H,</if>
            <if test="h24 != null">24H,</if>
            <if test="wk7 != null">7WK,</if>
            <if test="fwh != null">FWH,</if>
            <if test="fcLc != null">FCLC,</if>
            <if test="blCf != null">BLCF,</if>

            <if test="rsSl != null">RSSL,</if>
            <if test="rsPw != null">RSPW,</if>
            <if test="inAq != null">INAQ,</if>
            <if test="ven7Wk != null">7WK,</if>
            <if test="vtSp != null">VTSP,</if>
            <if test="vfLs != null">VFLS,</if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="deviceId != null">#{deviceId},</if>
            <if test="serialNumber != null">#{serialNumber},</if>
            <if test="rKey != null">#{rKey},</if>
            <if test="powr != null">#{powr},</if>
            <if test="opMd != null">#{opMd},</if>
            <if test="htTp != null">#{htTp},</if>
            <if test="wtTp != null">#{wtTp},</if>
            <if test="hwTp != null">#{hwTp},</if>
            <if test="ftMd != null">#{ftMd},</if>
            <if test="bCdt != null">#{bCdt},</if>
            <if test="chTp != null">#{chTp},</if>
            <if test="cwTp != null">#{cwTp},</if>
            <if test="hwSt != null">#{hwSt},</if>
            <if test="slCd != null">#{slCd},</if>
            <if test="mfDt != null">now(),</if>
            <if test="h12 != null">#{h12},</if>
            <if test="h24 != null">#{h24},</if>
            <if test="wk7 != null">#{wk7},</if>
            <if test="fwh != null">#{fwh},</if>
            <if test="fcLc != null">#{fcLc},</if>
            <if test="blCf != null">#{blCf},</if>

            <if test="rsSl != null">#{rsSl},</if>
            <if test="rsPw != null">#{rsPw},</if>
            <if test="inAq != null">#{inAq},</if>
            <if test="ven7Wk != null">#{ven7Wk},</if>
            <if test="vtSp != null">#{vtSp},</if>
            <if test="vfLs != null">#{VFLS},</if>
        </trim>
    </insert>

    <insert id="insertActiveStatus" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        INSERT INTO TBR_OPR_ACTIVE_DEVICE_STATUS
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="deviceId != null">DEVC_ID,</if>
            <if test="serialNumber != null">SERIAL_NO,</if>
            <if test="ftMdActv != null">FTMD,</if>
            <if test="fcLcActv != null">FCLC,</if>
            <if test="past != null">PAST,</if>
            <if test="inDr != null">INDR,</if>
            <if test="inCl != null">INCL,</if>
            <if test="ecSt != null">ECST,</if>
            <if test="mfDt != null">MFDT,</if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="deviceId != null">#{deviceId},</if>
            <if test="serialNumber != null">#{serialNumber},</if>
            <if test="ftMd != null">#{ftMd},</if>
            <if test="fcLc != null">#{fcLc},</if>
            <if test="past != null">#{past},</if>
            <if test="inDr != null">#{inDr},</if>
            <if test="inCl != null">#{inCl},</if>
            <if test="ecSt != null">#{ecSt},</if>
            <if test="mfDt != null">now(),</if>
        </trim>
    </insert>

    <update id="updateDeviceStatus" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE
            TBR_OPR_DEVICE_STATUS
                SET
                    SERIAL_NO = #{serialNumber},
                    R_KEY = #{rKey},
                    POWR = #{powr},
                    OPMD = #{opMd} ,
                    HTTP = #{htTp},
                    WTTP = #{wtTp},
                    HWTP = #{hwTp},
                    FTMD = #{ftMd},
                    BCDT = #{bCdt},
                    CHTP = #{chTp},
                    CWTP = #{cwTp},
                    HWST = #{hwSt},
                    7WK = #{wk7},
                    12H = #{h12},
                    24H = #{h24},
                    <if test="fwh != null">FWH = #{fwh},</if>
                    <if test="fcLc != null">FCLC = #{fcLc},</if>
                    <if test="blCf != null">BLCF = #{blCf},</if>
                    SLCD = #{slCd},
                    VTSP = #{vtSp},
                    VFLS = #{vfLs},
                    <if test="rsSl != null">RSSL = #{rsSl},</if>
                    <if test="rsPw != null">RSPW = #{rsPw},</if>
                    INAQ = #{inAq},
                    MFDT = now()
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <update id="updateActiveStatus" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE
            TBR_OPR_ACTIVE_DEVICE_STATUS
        SET
            <if test="serialNumber != null">SERIAL_NO = #{serialNumber},</if>
            <if test="fcLcActv != null">FTMD = #{fcLcActv},</if>
            <if test="ftMdActv != null">FCLC = #{ftMdActv},</if>
            <if test="past != null">PAST = #{past},</if>
            <if test="inDr != null">INDR = #{inDr},</if>
            <if test="inCl != null">INCL = #{inCl},</if>
            <if test="ecSt != null">ECST = #{ecSt},</if>
            MFDT = now()
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <update id="updateDeviceStatusFromApplication" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE TBR_OPR_DEVICE_STATUS
        <set>
            <if test="serialNumber != null">SERIAL_NO = #{serialNumber},</if>
            <if test="rKey != null">R_KEY = #{rKey},</if>
            <if test="powr != null">POWR = #{powr},</if>
            <if test="powr eq 'on'">DVST = '1',</if>
            <if test="opMd != null">OPMD = #{opMd},</if>
            <if test="htTp != null">HTTP = #{htTp},</if>
            <if test="wtTp != null">WTTP = #{wtTp},</if>
            <if test="hwTp != null">HWTP = #{hwTp},</if>
            <if test="ftMd != null">FTMD = #{ftMd},</if>
            <if test="bCdt != null">BCDT = #{bCdt},</if>
            <if test="chTp != null">CHTP = #{chTp},</if>
            <if test="cwTp != null">CWTP = #{cwTp},</if>
            <if test="hwSt != null">HWST = #{hwSt},</if>
            <if test="blCf != null">BLCF = #{blCf},</if>
            <if test="wk7 != null">7WK = #{wk7},</if>
            <if test="h12 != null">12H = #{h12},</if>
            <if test="h24 != null">24H = #{h24},</if>
            <if test="fwh != null">FWH = #{fwh},</if>
            <if test="slCd != null">SLCD = #{slCd},</if>
            <if test="ecOp != null">ECOP = #{ecOp},</if>
            <if test="fcLc != null">FCLC = #{fcLc},</if>
            <if test="vtSp != null">VTSP = #{vtSp},</if>
            <if test="rsPw != null">RSPW = #{rsPw},</if>
            MFDT = now(),
        </set>
        WHERE DEVC_ID = #{deviceId}
    </update>

    <select id="getDeviceStautsByDeviceId" parameterType="String" resultMap="dr910w">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBR_OPR_DEVICE_STATUS
        WHERE
            DEVC_ID = #{deviceId};
    </select>

    <select id="getActiveStautsByDeviceId" parameterType="String" resultMap="dr910w">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBR_OPR_ACTIVE_DEVICE_STATUS
        WHERE
            DEVC_ID = #{deviceId};
    </select>

    <insert id="insertUserDevice" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        INSERT INTO
            TBR_OPR_USER_DEVICE
        (
            USER_ID,
            DEVC_ID,
            DEVC_CTRL_KEY,
            ATTC_DATM,
            REG_DATM,
            GRP_IDX
        )
            VALUES
        (
            #{userId},
            #{deviceId},
            #{controlAuthKey},
            now(),
            now(),
            #{idx}
        )
    </insert>

    <update id="updateUserDevice" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE
            TBR_OPR_USER_DEVICE
        SET
            DEVC_CTRL_KEY = #{controlAuthKey}
        WHERE
            USER_ID = #{userId}
        AND
            DEVC_ID = #{deviceId}
    </update>

    <select id="getPushinfoByDeviceId" parameterType="String" resultMap="device">
        SELECT
            a.USER_ID AS userId,
            a.DEVC_ID AS deviceId,
            MAX(a.PUSH_YN_02) AS sPushYn,
            MAX(b.PUSH_TOKEN) AS pushToken -- PUSH_TOKEN의 중복을 제거
        FROM
            TBR_OPR_USER_DEVICE_PUSH a
        INNER JOIN
            TBR_OPR_ACCOUNT b ON a.USER_ID = b.USER_ID
        WHERE
            a.DEVC_ID = #{deviceId}
        GROUP BY
            a.USER_ID, a.DEVC_ID;
    </select>

    <select id="getDeviceStauts" parameterType="java.util.List" resultMap="dr910w">
        SELECT
            IFNULL(DEVC_ID, '') AS deviceId,
            IFNULL(SERIAL_NO, '') AS serialNumber,
            IFNULL(R_KEY, 0) AS rKey,
            IFNULL(POWR, '') AS powr,
            IFNULL(OPMD, 0) AS opMd,
            IFNULL(HTTP, 0.0) AS htTp,
            IFNULL(WTTP, 0.0) AS wtTp,
            IFNULL(HWTP, 0.0) AS hwTp,
            IFNULL(FTMD, '') AS ftMd,
            IFNULL(CHTP, 0.0) AS chTp,
            IFNULL(12H, '') AS h12,
            IFNULL(24H, '') AS h24,
            IFNULL(7WK, '') AS wk7,
            IFNULL(FWH, '') AS fwh,
            IFNULL(HWST, '') AS hwSt,
            IFNULL(FCLC, '') AS fcLc,
            IFNULL(MFDT, '') AS mfDt,
            IFNULL(SLCD, '') AS slCd,
            IFNULL(BCDT, '') AS bCdt,
            IFNULL(CWTP, 0.0) AS cwTp,
            IFNULL(BLCF, 0.0) AS blCf,
            IFNULL(VTSP, 0.0) AS vtSp,
            IFNULL(RSSL, 0.0) AS rsSl,
            IFNULL(RSPW, 0.0) AS rsPw,
            IFNULL(INAQ, 0.0) AS inAq,
            IFNULL(BLCF, 0.0) AS blCf
        FROM
            TBR_OPR_DEVICE_STATUS
        WHERE
            SERIAL_NO IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getActiveStauts" parameterType="java.util.List" resultMap="dr910w">
        SELECT
            IFNULL(DEVC_ID, '') AS deviceId,
            IFNULL(SERIAL_NO, '') AS serialNumber,
            IFNULL(FTMD, '') AS ftMd,
            IFNULL(FCLC, '') AS fcLc,
            IFNULL(PAST, '') AS past,
            IFNULL(INDR, '') AS inDr,
            IFNULL(INCL, '') AS inCl,
            IFNULL(ECST, '') AS ecSt,
            IFNULL(MFDT, '') AS mfDt
        FROM
            TBR_OPR_ACTIVE_DEVICE_STATUS
        WHERE
        SERIAL_NO IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getSingleDeviceStauts" parameterType="java.util.List" resultMap="dr910w">
        SELECT
            DEVC_ID AS deviceId,
            SERIAL_NO AS serialNumber,
            R_KEY AS rKey,
            POWR AS powr,
            OPMD AS opMd,
            HTTP AS htTp,
            WTTP AS wtTp,
            HWTP AS hwTp,
            FTMD AS ftMd,
            CHTP AS chTp,
            12H AS h12,
            24H AS h24,
            7WK AS wk7,
            FWH AS fwh,
            HWST AS hwSt,
            FCLC AS fcLc,
            MFDT AS mfDt,
            SLCD AS slCd,
            BCDT AS bCdt,
            CWTP AS cwTp
        FROM
            TBR_OPR_DEVICE_STATUS
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <insert id="insertErrorInfo" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_IOT_ERROR_COLEC
        (
            ERROR_NM,
            ERROR_CODE,
            REG_DATM,
            KEEP_CYCLE,
            SERIAL_NO,
            LAST_ERROR_DATM
        )
        VALUES
        (
            #{errorMessage},
            #{errorCode},
            now(),
            6,
            #{serialNumber},
            #{errorDateTime}
        )
    </insert>

    <select id="getDeviceErroInfo" parameterType="String" resultMap="device">
        SELECT
            ERROR_NM AS errorMessage,
            ERROR_CODE AS errorCode,
            LAST_ERROR_DATM AS errorDateTime,
            SERIAL_NO AS serialNumber
        FROM
            TBR_IOT_ERROR_COLEC
        WHERE
            SERIAL_NO = #{serialNumber}
    </select>

    <insert id="insertJson" parameterType="String">
        INSERT INTO
            GW_TEST_TABLE
        (
            JSONBODY
        )
        VALUES
        (
            #{jsonbody}
        )
    </insert>

    <select id="getDeviceRegistStatus" parameterType="String" resultMap="device">
        SELECT
            COUNT(*) AS deviceCount
        FROM
            TBR_IOT_DEVICE
        WHERE
            SERIAL_NO = #{serialNumber}
    </select>

    <update id="updateDeviceErrorStatus" parameterType="String">
        UPDATE
            TBR_OPR_DEVICE_STATUS
        SET
            DVST = '2'
        WHERE DEVC_ID = #{deviceId}
    </update>

    <select id="checkDeviceStatus" parameterType="com.oauth.dto.AuthServerDTO" resultMap="device">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBR_OPR_DEVICE_STATUS
        WHERE
            DEVC_ID = #{deviceId}
        AND
            R_KEY = #{controlAuthKey}
    </select>

    <update id="updateSleepMode" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE TBR_OPR_VENTI_DEVICE_STATUS
        <set>
            <if test="serialNumber != null">SERIAL_NO = #{serialNumber},</if>
            <if test="rKey != null">R_KEY = #{rKey},</if>
            <if test="powr != null">POWR = #{powr},</if>
            <if test="powr eq 'on'">DVST = '1',</if>
            <if test="opMd != null">OPMD = #{opMd},</if>
            <if test="vtSp != null">VTSP = #{vtSp},</if>
            <if test="onHour != null">ONHOUR = #{onHour},</if>
            <if test="onMinute != null">ONMINUTE = #{onMinute},</if>
            <if test="offHour != null">OFFHOUR = #{offHour},</if>
            <if test="offMinute != null">OFFMINUTE = #{offMinute},</if>
            <if test="pw != null">PW = #{pw},</if>
            <if test="hr != null">HR = #{hr},</if>
            <if test="mn != null">MN = #{mn},</if>
            <if test="ven7Wk != null">7WK = #{ven7Wk},</if>
            <if test="mfDt != null">MFDT = #{mfDt},</if>
        </set>
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <select id="checkDeviceAuthkeyExist" parameterType="com.oauth.dto.AuthServerDTO" resultMap="device">
        SELECT
            COALESCE(b.DEVC_CTRL_KEY, 'EMPTY') AS controlAuthKey
        FROM
            TBR_OPR_DEVICE_DETAIL a
        LEFT JOIN
            TBR_OPR_USER_DEVICE b
        ON
            b.USER_ID = #{userId}
        WHERE
            b.DEVC_ID = #{deviceId}
        AND
            b.USER_ID = #{userId}
        UNION ALL
        SELECT 'EMPTY' AS controlAuthKey
        WHERE NOT EXISTS (
        SELECT 1
        FROM
            TBR_OPR_DEVICE_DETAIL a
        INNER JOIN
            TBR_OPR_USER_DEVICE b
        ON
            b.USER_ID = #{userId}
        WHERE
            b.DEVC_ID = #{deviceId}
        AND
            b.USER_ID = #{userId}
        )
        LIMIT 1;
    </select>

    <insert id="insertFristDeviceUser" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_FIRST_DEVICE_USER
        (
            DEVC_ID,
            USER_ID,
            GRP_ID
        )
            VALUES
        (
            #{deviceId},
            #{userId},
            #{groupId}
        )
    </insert>

    <select id="checkDeviceExist" parameterType="String" resultMap="device">
        SELECT
            COUNT(*) AS deviceCount
        FROM
            TBR_OPR_DEVICE_DETAIL
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getCheckedDeviceExist" parameterType="String" resultMap="device">
        SELECT
            a.DEVC_ID AS deviceId,
            a.DEVC_CTRL_KEY AS controlAuthKey,
            b.USER_ID AS userId
        FROM
            TBR_OPR_DEVICE_DETAIL a
        INNER JOIN
            TBT_OPR_DEVICE_REGIST b
        ON
            a.DEVC_ID = b.DEVC_ID
        WHERE
            a.DEVC_ID = #{deviceId}
    </select>

    <select id="getInviteGroupIdxList" parameterType="String" resultMap="String">
        SELECT DISTINCT
            GRP_IDX AS groupIdx
        FROM
            TBD_USER_INVITE_GROUP
    </select>

    <select id="getRegistGroupIdxList" parameterType="String" resultMap="String">
        SELECT DISTINCT
            GRP_IDX AS groupIdx
        FROM
            TBT_OPR_DEVICE_REGIST
    </select>

    <select id="getDeviceIdByGroupIdx" parameterType="String" resultMap="device">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            GRP_IDX = #{groupIdx}
    </select>

    <delete id="deleteNoDeviceGroupByList" parameterType="list">
        DELETE FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_IDX  IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="getGroupNameAndDeviceNickByDeviceId" parameterType="String" resultMap="device">
        SELECT
            GRP_NM AS groupName,
            DEVC_NICK AS deviceNickname,
            GRP_IDX AS groupIdx
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getDeviceIdByDeviceModelCode" parameterType="String" resultMap="String">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBR_IOT_DEVICE
        WHERE
            DEVC_MODL_CD = 'ESCeco13S'
    </select>

    <select id="getDeviceNicknameByDeviceId" parameterType="String" resultMap="device">
        SELECT
            DEVC_NICK AS deviceNickname
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            DEVC_ID =  #{deviceId}
    </select>


</mapper>