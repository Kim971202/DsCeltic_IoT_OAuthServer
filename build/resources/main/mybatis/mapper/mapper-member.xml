<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oauth.mapper.MemberMapper">

    <resultMap id="member" type="com.oauth.dto.AuthServerDTO"> </resultMap>

    <select id="getPhoneIdInfo" parameterType="String" resultMap="member">
        SELECT
            HP_ID AS phoneId,
            USER_ID AS userId,
            PUSH_TOKEN AS pushToken
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{userId}
    </select>

        <update id="updatePhoneId" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_ACCOUNT
        SET
            HP_ID = #{phoneId}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getUserByUserId" parameterType="String" resultMap="member">
        SELECT
            HP AS hp,
            USER_ID AS userId,
            USER_NICK AS userNickname,
            API_ATTC_KEY AS accessToken
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getAccountByUserId" parameterType="String" resultMap="member">
        SELECT
            USER_ID AS userId,
            PW AS userPassword,
            REGIST_USER_TYPE AS registUserType
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{value}
    </select>

    <insert id="insertMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_USER
        (
            HP,
            USER_ID,
            USER_NICK
        )
        VALUES
        (
            #{hp},
            #{userId},
            #{userNickname}
        )
    </insert>

    <insert id="insertAccount" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_ACCOUNT
        (
            USER_ID,
            PW,
            REG_DATM,
            PUSH_TOKEN,
            REGIST_USER_TYPE,
            GOOGLE_HOME_STATUS
        )
        VALUES
        (
            #{userId},
            #{userPassword},
            now(),
            #{pushToken},
            #{registUserType},
            '01'
        )
    </insert>

    <select id="getUserByHp" parameterType="String" resultMap="member">
        SELECT
            a.HP AS hp,
            a.USER_ID AS userId,
            a.USER_NICK AS userNick,
            b.REGIST_USER_TYPE AS registUserType
        FROM
            TBR_OPR_USER a
        INNER JOIN
            TBR_OPR_ACCOUNT b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.HP = #{hp}
    </select>

    <select id="getUserByUserIdAndHp" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.HP AS hp,
            a.USER_ID AS userId,
            a.USER_NICK AS userNick,
            b.REGIST_USER_TYPE AS registUserType
        FROM
            TBR_OPR_USER a
        INNER JOIN
            TBR_OPR_ACCOUNT b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.USER_ID = #{userId} AND a.HP = #{hp}
    </select>

    <update id="updatePassword" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_ACCOUNT
        SET
            PW = #{newPassword}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getPasswordByUserId" parameterType="String" resultMap="member">
        SELECT PW AS userPassword
        FROM TBR_OPR_ACCOUNT
        WHERE USER_ID = #{userId};
    </select>

    <update id="updateHp" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            HP = #{newHp}
        WHERE
            USER_ID = #{userId}
    </update>

    <update id="updateUserNickname" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            USER_NICK = #{userNickname}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="checkDuplicateHp" parameterType="String" resultMap="member">
        SELECT
            COUNT(HP) AS hpCount
        FROM
            TBR_OPR_USER
        WHERE HP = #{newHp}
    </select>

    <select id="checkDuplicateHpByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(HP) AS hpCount
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
        AND
            HP = #{newHp}
    </select>

    <update id="updateGrpNick" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBD_IOT_GRP_INFO
        SET
            USER_NICK = #{userNickname}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getDeviceIdByUserId" parameterType="String" resultMap="member">
        SELECT DISTINCT
            a.USER_ID AS userId,
            a.DEVC_ID AS deviceId,
            a.DEVC_CTRL_KEY AS controlAuthKey,
            MAX(a.ATTC_DATM) AS authenticationDatetime,  -- 최근 인증 날짜를 선택
            c.DEVC_NICK AS deviceNickname,
            c.TEMP_DEVC_REG_KEY AS tmpRegistKey,
            c.LAT AS latitude,
            c.LON AS longitude,
            c.HP AS hp,
            MAX(a.REG_DATM) AS REG_DATM,  -- 가장 최근의 등록 날짜를 선택
            ROW_NUMBER() OVER () AS regSort
        FROM
            TBR_OPR_USER_DEVICE a
        INNER JOIN
            TBT_OPR_DEVICE_REGIST c ON c.DEVC_ID = a.DEVC_ID
        WHERE
            a.USER_ID = #{userId} AND c.USER_ID = #{userId}
        GROUP BY
            a.USER_ID,
            a.DEVC_ID,
            a.DEVC_CTRL_KEY,
            c.DEVC_NICK,
            c.TEMP_DEVC_REG_KEY,
            c.LAT,
            c.LON,
            c.HP
        ORDER BY
            MAX(a.REG_DATM) ASC
    </select>

    <insert id="inviteHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_USER_INVITE_STATUS
            (
                REQUEST_USER_ID,
                RESPONSE_USER_ID,
                RESPONSE_USER_HP,
                INVITE_START_DATE,
                INVITE_END_DATE,
                INVITE_ACCEPT_YN,
                REQUEST_USER_NICK,
                GRP_IDX,
                GRP_NM
            )
            VALUES(
                #{requestUserId},
                #{responseUserId},
                #{responseHp},
                DATE_FORMAT(now(), "%y-%m-%d %H:%i:%S"),
                DATE_ADD(DATE_FORMAT(now(), "%y-%m-%d %H:%i:%S"),
                INTERVAL 3 DAY),
                'D',
                #{requestUserNick},
                #{groupIdx},
                #{groupName}
            );
    </insert>

    <update id="updateInviteHouseMember" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_INVITE_STATUS
        SET
            INVITE_ACCEPT_YN = #{inviteAcceptYn},
            INVITE_ACCEPT_DATE = #{inviteAcceptDate}
        WHERE
            RESPONSE_USER_ID = #{userId}
    </update>

    <select id="getInvitationList" parameterType="String" resultMap="member">
        SELECT
            INVITATION_IDX AS invitationIdx,
            REQUEST_USER_ID AS requestUserId,
            RESPONSE_USER_ID AS responseUserId,
            RESPONSE_USER_HP AS responseHp,
            INVITE_START_DATE AS inviteStartDate,
            INVITE_END_DATE AS inviteEndDate,
            INVITE_ACCEPT_YN AS inviteAcceptYn,
            REQUEST_USER_NICK AS requestUserNick,
            RESPONSE_USER_NICK AS responseUserNick,
            GRP_IDX AS groupIdx,
            GRP_NM AS groupName
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            REQUEST_USER_ID = #{responseUserId} OR RESPONSE_USER_ID = #{responseUserId};
    </select>
    
    <update id="acceptInvite" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_INVITE_STATUS
        SET
            INVITE_ACCEPT_YN = #{inviteAcceptYn},
            INVITE_ACCEPT_DATE = now(),
            RESPONSE_USER_NICK = #{responseNickname}
        WHERE INVITATION_IDX = #{invitationIdx}
    </update>

    <update id="updatePushCodeStatusSingle" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_DEVICE_PUSH
        <set>
            <if test="fPushYn != null">PUSH_YN_01 = #{fPushYn},</if>
            <if test="sPushYn != null">PUSH_YN_02 = #{sPushYn},</if>
        </set>
        WHERE
            USER_ID = #{userId} AND DEVC_ID = #{deviceId}
    </update>

    <update id="updatePushCodeStatus" parameterType="java.util.List">
        UPDATE TBR_OPR_USER_DEVICE_PUSH
        SET
        PUSH_YN_01 = CASE
        <foreach collection="list" item="item" index="index">
            WHEN USER_ID = #{item.userId} AND DEVC_ID = #{item.deviceId} THEN #{item.fPushYn}
        </foreach>
        ELSE PUSH_YN_01
        END,
        PUSH_YN_02 = CASE
        <foreach collection="list" item="item" index="index">
            WHEN USER_ID = #{item.userId} AND DEVC_ID = #{item.deviceId} THEN #{item.sPushYn}
        </foreach>
        ELSE PUSH_YN_02
        END
        WHERE
        (USER_ID, DEVC_ID) IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            (#{item.userId}, #{item.deviceId})
        </foreach>
    </update>

    <select id="getPushCodeStatus" parameterType="map" resultMap="member">
        SELECT
            push.PUSH_YN_01 AS fPushYn,
            push.PUSH_YN_02 AS sPushYn,
            push.PUSH_YN_03 AS tPushYn,
            push.DEVC_ID AS deviceId,
            device.ATTC_ID AS controlAuthKey,
            device.DEVC_MODL_CD AS modelCode
        FROM
            TBR_OPR_USER_DEVICE_PUSH AS push
        INNER JOIN
            TBR_IOT_DEVICE AS device
        ON
            push.DEVC_ID = device.DEVC_ID
        WHERE
            push.USER_ID = #{userId}
        AND
            push.DEVC_ID IN (${deviceIds})
    </select>

    <select id="getNextHouseholderUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            DEVC_ID as deviceId,
            USER_ID AS userId
        FROM
            TBR_OPR_USER_DEVICE
        WHERE
            USER_ID != #{userId}
        LIMIT 1;
    </select>

    <select id="deleteMemberFromService" parameterType="String" resultType="String">
        CALL deleteUserFromService(#{userId})
    </select>

    <select id="deleteControllerMapping" parameterType="com.oauth.dto.AuthServerDTO" resultType="String">
        CALL
            deleteControllerMapping
                (
                    #{deviceId},
                    #{userId},
                    #{controlAuthKey}
                )
    </select>

    <select id="getPushInfoList" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            PUSH_IDX AS pushIdx,
            PUSH_TITLE AS pushTitle,
            PUSH_CONTENT AS pushContent,
            PUSH_TYPE AS pushType,
            DEVC_NICK AS deviceNickname,
            GRP_NM AS groupName,
            GRP_IDX AS groupIdx,
            (
            CASE
                 WHEN DEVC_TYPE = '01' THEN '보일러'
                 WHEN DEVC_TYPE = '05' THEN '각방'
                 WHEN DEVC_TYPE = '07' THEN '환기'
                 WHEN DEVC_TYPE = 'invite' THEN 'invite'
                 ELSE '-'
            END
            ) AS deviceType,
            DATE_FORMAT(PUSH_DATETIME, '%Y-%m-%d %H:%i:%s') AS pushDateTime
        FROM
            TBR_OPR_USER_DEVICE_PUSH_INFO
        WHERE
            USER_ID = #{userId}
        <if test="deviceType != 00">
            AND DEVC_TYPE = #{deviceType}
        </if>
        ORDER BY
            PUSH_DATETIME DESC
        LIMIT
            #{frontRow}, #{secondRow}
    </select>

    <select id="checkLastIndex" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT COUNT(*) AS lastIndex
        FROM (
            SELECT PUSH_TITLE
            FROM TBR_OPR_USER_DEVICE_PUSH_INFO
            WHERE USER_ID = #{userId}
            <if test="deviceType != '00'">
                AND DEVC_TYPE = #{deviceType}
            </if>
            ORDER BY PUSH_DATETIME DESC
            LIMIT #{frontRow}, #{secondRow}
        ) AS subquery
    </select>

    <select id="getNoticeList" resultMap="member">
        SELECT
            NOTI_IDX AS noticeIdx,
            NOTI_TITLE AS noticeTitle,
            NOTI_CONTENT AS noticeContent,
            NOTI_START_DATE AS noticeStartDate,
            NOTI_END_DATE AS noticeEndDate
        FROM
            TBR_OPR_USER_NOTICE
        WHERE
            DATE_FORMAT(NOTI_START_DATE, '%Y%m%d') BETWEEN #{startDatetime} AND #{endDatetime}
    </select>

    <update id="updateDeviceLocationNicknameDeviceDetail" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_DEVICE_DETAIL
        SET
            ADDR_NICK = #{newDeviceLocNickname}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <update id="updateDeviceLocationNicknameDeviceRegist" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            GRP_NM = #{groupName}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <select id="getUserIdByUserId" resultMap="member">
        SELECT
            USER_ID AS userId
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{userId}
    </select>

    <insert id="insertCommandHistory" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_IOT_CTRL_REQ
        (
            CD_TYPE,
            COMD_ID,
            CTRL_CD,
            CTRL_CD_NM,
            COMD_FLOW,
            COMD_DATM,
            USER_ID,
            DEVC_ID
        )
            VALUES
        (
            #{codeType},
            #{commandId},
            #{controlCode},
            #{controlCodeName},
            #{commandFlow},
            now(),
            #{userId},
            #{deviceId}
        )
    </insert>

    <select id="identifyRKey" parameterType="String" resultMap="member">
        SELECT
            a.DEVC_ID AS deviceId,
            a.SERIAL_NO AS serialNumber,
            b.DEVC_CTRL_KEY AS controlAuthKey
        FROM
            TBR_IOT_DEVICE a
        INNER JOIN
            TBR_OPR_DEVICE_DETAIL b
        WHERE
            a.DEVC_ID = b.DEVC_ID
        AND
            a.SERIAL_NO = #{serialNumber}
    </select>

    <update id="updateLoginDatetime" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            LAST_LOGIN_DATM = now(),
            API_ATTC_KEY = #{accessToken},
            API_ATTC_KEY_CRE_DATM = now()
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getHpByUserId" parameterType="String" resultMap="member">
        SELECT
            HP AS hp
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getUserIdFromDeviceGroup" parameterType="String" resultMap="member">
        SELECT
            GRP_ID AS userId
        FROM
            TBR_IOT_DEVICE_GRP_INFO
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getDeviceIdFromDeviceGroup" parameterType="String" resultMap="member">
        SELECT
            COUNT(*) AS deviceCount
        FROM
            TBR_IOT_DEVICE_GRP_INFO
        WHERE
            GRP_ID = #{groupId}
    </select>

    <select id="getWorkTime" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            DATE_FORMAT(INSERT_DATETIME, '%Y%m%d') AS workDate,
            CAST(SUM(WORK_TIME) AS UNSIGNED) AS workTime
        FROM
            TBR_OPR_DEVICE_WORK_DATETIME
        WHERE
            DEVC_ID = #{deviceId}
        AND
            USER_ID = #{userId}
        AND
            INSERT_DATETIME BETWEEN #{startDate} AND #{endDate}
        GROUP BY
            DATE_FORMAT(INSERT_DATETIME, '%Y%m%d')
        ORDER BY
            workDate ASC;
    </select>

    <insert id="insertWorkTime" parameterType="java.util.List">
        INSERT INTO TBR_OPR_DEVICE_WORK_DATETIME
        (
            USER_ID,
            DEVC_ID,
            WORK_TIME,
            INSERT_DATETIME
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.userId},
                #{item.deviceId},
                #{item.workTime},
                #{item.msDt}
            )
        </foreach>
    </insert>

    <select id="getPushTokenByUserId" parameterType="String" resultMap="member">
        SELECT
            PUSH_TOKEN AS pushToken
        FROM
            TBR_OPR_ACCOUNT
        WHERE
            USER_ID = #{userId}
    </select>

    <update id="updatePushToken" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_ACCOUNT
        SET
            PUSH_TOKEN = #{pushToken}
        WHERE
            USER_ID = #{userId}
    </update>

    <insert id="insertPushHistory" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_USER_DEVICE_PUSH_INFO
        (
            USER_ID,
            PUSH_TITLE,
            PUSH_CONTENT,
            PUSH_TYPE,
            PUSH_DATETIME,
            DEVC_ID,
            DEVC_TYPE,
            DEVC_NICK,
            GRP_NM,
            GRP_IDX
        )
        VALUES
        (
            #{userId},
            #{pushTitle},
            #{pushContent},
            #{pushType},
            now(),
            #{deviceId},
            #{deviceType},
            #{deviceNickname},
            #{groupName},
            #{groupIdx}
        )
    </insert>

    <insert id="InsertSafeAlarmSet" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
            TBR_OPR_SAFE_ALARM
        (
            USER_ID,
            DEVC_ID,
            SAFE_ALARM_TIME,
            SAFE_ALARM_STATUS
        )
            VALUES
        (
            #{userId},
            #{deviceId},
            #{safeAlarmTime},
            #{safeAlarmStatus}
        )
    </insert>

    <update id="updateSafeAlarm" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_SAFE_ALARM
        SET
            SAFE_ALARM_TIME = #{safeAlarmTime},
            SAFE_ALARM_STATUS = #{safeAlarmStatus},
            SAFE_ALARM_REG_TIME = now()
        WHERE
            USER_ID = #{userId}
        AND
            DEVC_ID = #{deviceId}
    </update>

    <select id="checkSafeAlarmSet" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(*) AS lastIndex
        FROM (
            SELECT
                USER_ID
            FROM
                TBR_OPR_SAFE_ALARM
            WHERE
                USER_ID = #{userId}
            AND
                DEVC_ID = #{deviceId}
            ORDER BY
                SAFE_ALARM_REG_TIME DESC
        ) AS subquery;
    </select>

    <update id="updateSafeAlarmSet" parameterType="com.oauth.dto.gw.DeviceStatusInfo">
        UPDATE
            TBR_OPR_SAFE_ALARM
        SET
            REC_HWST_RUN_TIME = now(),
            HWST_STATUS = #{hwSt}
        WHERE
            DEVC_ID = #{deviceId}
    </update>

    <select id="getSafeAlarmSet" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            USER_ID AS userId,
            DEVC_ID AS deviceId,
            SAFE_ALARM_TIME AS safeAlarmTime,
            SAFE_ALARM_STATUS AS safeAlarmStatus,
            NOW() + INTERVAL CAST(SUBSTRING(SAFE_ALARM_TIME, 1, 2) AS UNSIGNED) DAY
            + INTERVAL CAST(SUBSTRING(SAFE_ALARM_TIME, 3, 2) AS UNSIGNED) HOUR AS CALCULATED_TIME,
            REC_HWST_RUN_TIME AS hwStTime
        FROM
            TBR_OPR_SAFE_ALARM
        WHERE
            (SAFE_ALARM_STATUS = 'Y' OR SAFE_ALARM_STATUS IS NULL)
        AND (HWST_STATUS = 'of' OR HWST_STATUS IS NULL)
        AND (
            REC_HWST_RUN_TIME IS NULL
            OR SAFE_ALARM_REG_TIME + INTERVAL CAST(SUBSTRING(SAFE_ALARM_TIME, 1, 2) AS UNSIGNED) DAY
            + INTERVAL CAST(SUBSTRING(SAFE_ALARM_TIME, 3, 2) AS UNSIGNED) HOUR > REC_HWST_RUN_TIME
        )
        AND (
            SAFE_ALARM_REG_TIME + INTERVAL CAST(SUBSTRING(SAFE_ALARM_TIME, 1, 2) AS UNSIGNED) DAY
            + INTERVAL CAST(SUBSTRING(SAFE_ALARM_TIME, 3, 2) AS UNSIGNED) HOUR &lt; NOW()
        );
    </select>

    <select id="getUserIdsByDeviceId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            GRP_ID AS userId,
            DEVC_ID AS deviceId
        FROM
            TBR_IOT_DEVICE_GRP_INFO
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getAllUserIdsByDeviceId" parameterType="String" resultMap="member">
        SELECT
            a.USER_ID AS userId,
            b.DEVC_ID AS deviceId
        FROM
            TBD_IOT_GRP_INFO a
        INNER JOIN
            TBR_IOT_DEVICE_GRP_INFO b
        ON
            a.GRP_NM = b.GRP_ID
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getPushYnStatusByUserIds" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            PUSH_YN_01 AS fPushYn,
            PUSH_YN_02 AS sPushYn,
            PUSH_YN_03 AS tPushYn
        FROM
            TBR_OPR_USER_DEVICE_PUSH
        WHERE
            USER_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.userId}
        </foreach>
        AND
            DEVC_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deviceId}
        </foreach>
    </select>

    <update id="updateGrpInfoTableForNewHousehold" parameterType="com.oauth.dto.AuthServerDTO" >
        UPDATE
            TBD_IOT_GRP_INFO
        SET
            GRP_NM = #{newId} <!-- yohan971202 -->
        WHERE
            GRP_NM = #{oldId} <!-- yohan1202 -->
    </update>

    <update id="updateGrpDeviceInfoTableForNewHousehold" parameterType="com.oauth.dto.AuthServerDTO" >
        UPDATE
            TBR_IOT_DEVICE_GRP_INFO
        SET
            GRP_ID = #{userId}
        WHERE
            GRP_ID = #{groupName}
    </update>

    <update id="updateRegistTable" parameterType="com.oauth.dto.AuthServerDTO" >
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            HP = #{hp},
            USER_ID = #{requestUserId}
        WHERE
            USER_ID = #{responseUserId}
    </update>

    <insert id="insertHouseholder" parameterType="com.oauth.dto.AuthServerDTO" >
        INSERT INTO
            TBD_IOT_GRP_INFO
        (
            GRP_ID,
            USER_ID,
            GRP_NM,
            HOUSE_HOLDER,
            USER_NICK,
            REG_DATM
        )
        VALUES
        (
            #{userId},
            #{userId},
            #{userId},
            'Y',
            #{userNickname},
            NOW()
        )
    </insert>

    <select id="getFailyMemberByUserId" parameterType="String" resultMap="member">
        SELECT
            a.GRP_ID AS groupId,
            a.USER_ID AS userId,
            b.HP AS hp,
            b.USER_NICK AS userNickname,
            a.GRP_IDX AS groupIdx,
            a.GRP_NM AS groupName
        FROM
            TBD_USER_INVITE_GROUP a
        INNER JOIN
            TBR_OPR_USER b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.GRP_IDX = #{groupIdx}
        AND (a.USER_ID = #{userId} OR a.GRP_ID = #{userId})
    </select>

    <select id="getFamilyMemberByGroupIdxList" parameterType="java.util.List" resultMap="member">
        SELECT
            a.GRP_ID AS groupId,
            a.USER_ID AS userId,
            b.HP AS hp,
            b.USER_NICK AS userNickname,
            a.GRP_IDX AS groupIdx,
            a.GRP_NM AS groupName
        FROM
            TBD_USER_INVITE_GROUP a
        INNER JOIN
            TBR_OPR_USER b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.GRP_IDX IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

<!--    <select id="getMemberByGroupIdxList" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">-->
<!--        SELECT-->
<!--            a.GRP_ID AS groupId,-->
<!--            a.USER_ID AS userId,-->
<!--            b.HP AS hp,-->
<!--            b.USER_NICK AS userNickname,-->
<!--            a.GRP_IDX AS groupIdx,-->
<!--            a.GRP_NM AS groupName-->
<!--        FROM-->
<!--            TBD_USER_INVITE_GROUP a-->
<!--        INNER JOIN-->
<!--            TBR_OPR_USER b-->
<!--        ON-->
<!--            a.USER_ID = b.USER_ID-->
<!--        WHERE-->
<!--        <choose>-->
<!--            <when test="houseLeaderFlag == 0">-->
<!--                a.GRP_ID = #{userId}-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                a.USER_ID = #{userId}-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--    </select>-->

    <select id="getMemberByGroupIdxList" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT DISTINCT
            GRP_IDX AS groupIdx,
            GRP_NM AS groupName
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
        <choose>
            <when test="houseLeaderFlag == 1">
                GRP_ID = #{userId}
            </when>
            <otherwise>
                USER_ID = #{userId}
            </otherwise>
        </choose>
    </select>

    <select id="getGroupLeaderId" parameterType="Long" resultMap="member">
        SELECT
            GRP_ID AS groupId
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            idx = #{idx}
    </select>

    <select id="getGroupLeaderIdByGroupIdx" parameterType="String" resultMap="member">
        SELECT
            GRP_ID AS groupId
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_IDX = #{groupIdx}
        LIMIT 1
    </select>

    <select id="getHouseholdByUserId" parameterType="String" resultMap="member">
        SELECT
            USER_ID AS userId,
            USER_NICK AS userNickname,
            HOUSE_HOLDER AS householder,
            GRP_NM AS groupId
        FROM
            TBD_IOT_GRP_INFO
        WHERE
            GRP_ID = #{userId}
    </select>

    <select id="getGroupIdByUserId" parameterType="String" resultMap="member">
        SELECT
            GRP_ID AS groupId,
            USER_ID AS userId,
            GRP_NM AS groupName,
            GRP_IDX AS groupIdx
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getGroupNameByGroupIdx" parameterType="String" resultMap="member">
        SELECT
            GRP_NM AS groupName
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_IDX = #{groupIdx}
    </select>

    <select id="getGroupMemberByUserId" parameterType="String" resultMap="member">
        SELECT
            GRP_ID AS groupId,
            USER_ID AS userId,
            GRP_NM AS groupName,
            HOUSE_HOLDER AS householder
        FROM
            TBD_IOT_GRP_INFO
        WHERE
            GRP_ID = #{userId}
    </select>

    <update id="delHouseholdMember" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBD_IOT_GRP_INFO
        SET
            GRP_NM = #{delUserId},
            HOUSE_HOLDER = 'Y'
        WHERE
            GRP_ID = #{delUserId}
    </update>

    <select id="getNextHouseholder" parameterType="String" resultMap="member">
        SELECT
            GRP_ID AS groupId,
            USER_ID AS userId,
            GRP_NM AS groupName,
            HOUSE_HOLDER AS householder
        FROM
        TBD_IOT_GRP_INFO
        WHERE
            GRP_NM = #{userId} AND USER_ID != #{userId}
        LIMIT 1
    </select>

    <select id="getUserNickname" parameterType="String" resultMap="member">
        SELECT
            USER_NICK AS userNickname
        FROM
            TBD_IOT_GRP_INFO
        WHERE
            GRP_ID = #{userId}
    </select>

    <select id="getPushYnStatusByDeviceIdAndUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            PUSH_YN_01 AS fPushYn,
            PUSH_YN_02 AS sPushYn,
            PUSH_YN_03 AS tPushYn
        FROM
            TBR_OPR_USER_DEVICE_PUSH
        WHERE
            DEVC_ID = #{deviceId}
        AND
            USER_ID = #{userId}
    </select>

    <select id="getFirstDeviceUser" parameterType="String" resultMap="member">
        SELECT
            DEVC_ID AS deviceId,
            USER_ID AS userId,
            GRP_ID AS groupId
        FROM
            TBR_FIRST_DEVICE_USER
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <insert id="insertUserDevicePush" parameterType="com.oauth.dto.AuthServerDTO" >
        INSERT INTO
            TBR_OPR_USER_DEVICE_PUSH
        (
            USER_ID,
            DEVC_ID,
            HP,
            PUSH_YN_01,
            PUSH_YN_02,
            PUSH_YN_03
        )
            VALUES
        (
            #{userId},
            #{deviceId},
            #{hp},
            'Y',
            'Y',
            'N'
        )
    </insert>

    <insert id="insertUserDevicePushByList" parameterType="java.util.List" >
        INSERT INTO
            TBR_OPR_USER_DEVICE_PUSH
        (
            USER_ID,
            DEVC_ID,
            HP,
            PUSH_YN_01,
            PUSH_YN_02,
            PUSH_YN_03
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.userId},
                #{item.deviceId},
                #{item.hp},
                'Y',
                'Y',
                'N'
            )
        </foreach>
    </insert>

    <delete id="deleteUserDevicePush" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE
        FROM
            TBR_OPR_USER_DEVICE_PUSH
        WHERE
            USER_ID IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item.userId}
            </foreach>
        AND
            DEVC_ID IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item.deviceId}
            </foreach>
    </delete>

    <delete id="deleteDeviceGrpInfo" parameterType="com.oauth.dto.AuthServerDTO">
        DELETE
        FROM
            TBR_IOT_DEVICE_GRP_INFO
        WHERE
            GRP_ID IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item.userId}
            </foreach>
        AND
            DEVC_ID IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item.deviceId}
            </foreach>
    </delete>

    <select id="getDeviceIdFromRegist" parameterType="String" resultMap="member">
        SELECT
            DEVC_ID AS deviceId
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            USER_ID = #{userId}
    </select>

    <delete id="deleteUserInviteGroup" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            USER_ID = #{delUserId}
        AND
            GRP_IDX = #{groupIdx}
    </delete>

    <select id="getNextUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.USER_ID AS userId,
            b.HP AS hp
        FROM
            TBD_USER_INVITE_GROUP a
        INNER JOIN
            TBR_OPR_USER b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.GRP_IDX = #{groupIdx}
        AND
            a.USER_ID != #{userId}
        LIMIT 1
    </select>

    <update id="updateNewHouseHolder" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBD_USER_INVITE_GROUP
        SET
            GRP_ID = #{nextUserId}
        WHERE
            GRP_IDX = #{groupIdx}
        AND
            GRP_ID = #{userId}
    </update>

    <select id="getFwhInfo" parameterType="String" resultMap="member">
        SELECT
            FWH AS fastHotWater
        FROM
            TBR_OPR_DEVICE_STATUS
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getFanLifeStatus" parameterType="String" resultMap="member">
        SELECT
            VFLS AS ventFanLifeStatus
        FROM
            TBR_OPR_DEVICE_STATUS
        WHERE
            DEVC_ID = #{deviceId}
    </select>

    <select id="getDeviceNicknameByDeviceId" parameterType="String" resultMap="member">
        SELECT
            DEVC_NICK AS deviceNickname
        FROM
            TBR_OPR_DEVICE_DETAIL
        WHERE
            DEVC_ID = #{deviceId}
        LIMIT 1
    </select>

    <insert id="insertInviteGroup" parameterType="com.oauth.dto.AuthServerDTO" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO
            TBD_USER_INVITE_GROUP
        (
            GRP_ID,
            GRP_NM,
            USER_ID,
            GRP_IDX
        )
        VALUES
        (
            #{groupId},
            #{groupName},
            #{groupId},
            #{idx}
        )
    </insert>

    <update id="updateInviteGroup" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBD_USER_INVITE_GROUP
        SET
            GRP_IDX = #{idx}
        WHERE
            idx = #{idx}
    </update>

    <select id="checkDuplicateGroupName" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(*) AS groupNameCount
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_ID = #{userId}
        AND
            GRP_NM = #{groupName}
    </select>

    <update id="updateDeviceRegist" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBT_OPR_DEVICE_REGIST
        SET
            USER_ID = #{nextUserId},
            HP = #{hp}
        WHERE
            USER_ID = #{userId};
    </update>

    <update id="updateLoginoutStatus" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER
        SET
            USER_STATUS_LOG_INOUT = #{loginoutStatus}
        WHERE
            USER_ID = #{userId}
    </update>

    <select id="getUserLoginoutStatus" parameterType="String" resultMap="member">
        SELECT
            USER_STATUS_LOG_INOUT AS loginoutStatus
        FROM
            TBR_OPR_USER
        WHERE
            USER_ID = #{userId}
    </select>

    <update id="updateUserDevice" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_USER_DEVICE
        SET
            USER_ID = #{nextUserId}
        WHERE
            USER_ID = #{userId};
    </update>

    <insert id="insertInviteGroupMember" parameterType="com.oauth.dto.AuthServerDTO">
        INSERT INTO
        TBD_USER_INVITE_GROUP
        (
            GRP_IDX,
            GRP_ID,
            USER_ID,
            GRP_NM
        )
        VALUES
        (
            #{groupIdx},
            #{requestUserId},
            #{responseUserId},
            #{groupName}
        )
    </insert>

    <select id="getRegistDeviceIdByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            DEVC_ID AS deviceId,
            USER_ID AS userId,
            HP AS hp
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            USER_ID = #{userId}
        AND
            GRP_IDX = #{groupIdx}
    </select>

    <select id="getGroupIdxByUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            GRP_IDX AS groupIdx,
            USER_ID AS userId,
            GRP_NM AS groupName,
            HP AS hp,
            DEVC_ID AS deviceId
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            USER_ID = #{userId}
    </select>

    <select id="getGroupIdxByUserIdAndIdx" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            GRP_IDX AS groupIdx,
            USER_ID AS userId,
            GRP_NM AS groupName,
            HP AS hp,
            DEVC_ID AS deviceId
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            USER_ID = #{groupId}
        AND
            GRP_IDX = #{groupIdx}
    </select>

    <select id="getDeviceCountFromRegist" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(*) AS deviceCount
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            USER_ID = #{userId}
        AND
            GRP_IDX = #{groupIdx}
    </select>

    <select id="getInviteGroupIdx" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            GRP_IDX AS groupIdx
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_ID = #{userId}
        AND
            USER_ID = #{userId}
    </select>

    <select id="getDeviceIdByUserIds" parameterType="String" resultMap="member">
        SELECT
            GRP_ID AS userId,
            DEVC_ID AS deviceId
        FROM
            TBR_IOT_DEVICE_GRP_INFO
        WHERE
            GRP_ID = #{userId}
    </select>

    <select id="getPushTokenByUserIds" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            a.PUSH_TOKEN AS pushToken,
            a.USER_ID AS userId,
            b.USER_NICK AS userNickname
        FROM
            TBR_OPR_ACCOUNT a
        INNER JOIN
            TBR_OPR_USER b
        ON
            a.USER_ID = b.USER_ID
        WHERE
            a.USER_ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.userId}
        </foreach>
    </select>

    <delete id="deleteUserInviteGroupByGroupIdx" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_IDX = #{groupIdx}
    </delete>

    <select id="getInviteCount" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(*) AS inviteCount
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            REQUEST_USER_ID = #{requestUserId}
        AND
            RESPONSE_USER_ID = #{responseUserId}
    </select>

    <select id="getInviteCountFromInviteStatus" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(*) AS inviteCount
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            REQUEST_USER_ID = #{requestUserId}
        AND
            RESPONSE_USER_ID = #{responseUserId}
        AND
            GRP_IDX = #{groupIdx}
        AND
            INVITE_ACCEPT_YN = 'D'
    </select>

    <delete id="deleteInviteStatusByHouseholdMembers" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            GRP_IDX = #{groupIdx}
        AND
            REQUEST_USER_ID = #{userId}
        AND
            RESPONSE_USER_ID = #{delUserId}
    </delete>

    <delete id="deleteInviteStatusByHouseholder" parameterType="com.oauth.dto.AuthServerDTO" >
        DELETE
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            GRP_IDX = #{groupIdx}
        AND
            REQUEST_USER_ID = #{userId}
    </delete>

    <delete id="deleteInviteStatusByGroupIdx" parameterType="String" >
        DELETE
        FROM
            TBR_OPR_USER_INVITE_STATUS
        WHERE
            GRP_IDX = #{groupIdx}
    </delete>

    <select id="getInviteCountByReqeustResponseUserId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            COUNT(*) AS inviteCount
        FROM
            TBD_USER_INVITE_GROUP
        WHERE
            GRP_ID = #{requestUserId}
        AND
            USER_ID = #{responseUserId}
        AND
            GRP_IDX = #{groupIdx}
    </select>

    <select id="getGroupInfoByDeviceId" parameterType="com.oauth.dto.AuthServerDTO" resultMap="member">
        SELECT
            GRP_IDX AS groupIdx,
            GRP_NM AS groupName,
            DEVC_NICK AS deviceNickname
        FROM
            TBT_OPR_DEVICE_REGIST
        WHERE
            DEVC_ID IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item.deviceId}
            </foreach>
        ORDER BY
            FIELD(DEVC_ID,
            <foreach collection="list" item="item" separator=",">
                #{item.deviceId}
            </foreach>
            );
    </select>

    <update id="updateSafePushAlarmTime" parameterType="com.oauth.dto.AuthServerDTO">
        UPDATE
            TBR_OPR_SAFE_ALARM
        SET
            SAFE_ALARM_REG_TIME = now()
        WHERE
            USER_ID = #{userId}
        AND
            DEVC_ID = #{deviceId}
    </update>

</mapper>